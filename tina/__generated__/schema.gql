# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  posts_ua(relativePath: String): Posts_ua!
  posts_uaConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Posts_uaFilter): Posts_uaConnection!
  posts_en(relativePath: String): Posts_en!
  posts_enConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Posts_enFilter): Posts_enConnection!
  pages_ua(relativePath: String): Pages_ua!
  pages_uaConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Pages_uaFilter): Pages_uaConnection!
  pages_en(relativePath: String): Pages_en!
  pages_enConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Pages_enFilter): Pages_enConnection!
}

input DocumentFilter {
  posts_ua: Posts_uaFilter
  posts_en: Posts_enFilter
  pages_ua: Pages_uaFilter
  pages_en: Pages_enFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Posts_ua | Posts_en | Pages_ua | Pages_en | Folder

type Posts_ua implements Node & Document {
  title: String!
  date: String!
  draft: Boolean
  description: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input Posts_uaFilter {
  title: StringFilter
  date: DatetimeFilter
  draft: BooleanFilter
  description: StringFilter
  tags: StringFilter
  body: RichTextFilter
}

type Posts_uaConnectionEdges {
  cursor: String!
  node: Posts_ua
}

type Posts_uaConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Posts_uaConnectionEdges]
}

type Posts_en implements Node & Document {
  title: String!
  date: String!
  draft: Boolean
  description: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Posts_enFilter {
  title: StringFilter
  date: DatetimeFilter
  draft: BooleanFilter
  description: StringFilter
  tags: StringFilter
  body: RichTextFilter
}

type Posts_enConnectionEdges {
  cursor: String!
  node: Posts_en
}

type Posts_enConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Posts_enConnectionEdges]
}

type Pages_ua implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Pages_uaFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type Pages_uaConnectionEdges {
  cursor: String!
  node: Pages_ua
}

type Pages_uaConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Pages_uaConnectionEdges]
}

type Pages_en implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Pages_enFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type Pages_enConnectionEdges {
  cursor: String!
  node: Pages_en
}

type Pages_enConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Pages_enConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePosts_ua(relativePath: String!, params: Posts_uaMutation!): Posts_ua!
  createPosts_ua(relativePath: String!, params: Posts_uaMutation!): Posts_ua!
  updatePosts_en(relativePath: String!, params: Posts_enMutation!): Posts_en!
  createPosts_en(relativePath: String!, params: Posts_enMutation!): Posts_en!
  updatePages_ua(relativePath: String!, params: Pages_uaMutation!): Pages_ua!
  createPages_ua(relativePath: String!, params: Pages_uaMutation!): Pages_ua!
  updatePages_en(relativePath: String!, params: Pages_enMutation!): Pages_en!
  createPages_en(relativePath: String!, params: Pages_enMutation!): Pages_en!
}

input DocumentUpdateMutation {
  posts_ua: Posts_uaMutation
  posts_en: Posts_enMutation
  pages_ua: Pages_uaMutation
  pages_en: Pages_enMutation
  relativePath: String
}

input DocumentMutation {
  posts_ua: Posts_uaMutation
  posts_en: Posts_enMutation
  pages_ua: Pages_uaMutation
  pages_en: Pages_enMutation
}

input Posts_uaMutation {
  title: String
  date: String
  draft: Boolean
  description: String
  tags: [String]
  body: JSON
}

input Posts_enMutation {
  title: String
  date: String
  draft: Boolean
  description: String
  tags: [String]
  body: JSON
}

input Pages_uaMutation {
  title: String
  description: String
  body: JSON
}

input Pages_enMutation {
  title: String
  description: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
