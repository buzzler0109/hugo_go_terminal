//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  posts_ua: Posts_Ua;
  posts_uaConnection: Posts_UaConnection;
  posts_en: Posts_En;
  posts_enConnection: Posts_EnConnection;
  pages_ua: Pages_Ua;
  pages_uaConnection: Pages_UaConnection;
  pages_en: Pages_En;
  pages_enConnection: Pages_EnConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPosts_UaArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPosts_UaConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Posts_UaFilter>;
};


export type QueryPosts_EnArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPosts_EnConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Posts_EnFilter>;
};


export type QueryPages_UaArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPages_UaConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Pages_UaFilter>;
};


export type QueryPages_EnArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPages_EnConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Pages_EnFilter>;
};

export type DocumentFilter = {
  posts_ua?: InputMaybe<Posts_UaFilter>;
  posts_en?: InputMaybe<Posts_EnFilter>;
  pages_ua?: InputMaybe<Pages_UaFilter>;
  pages_en?: InputMaybe<Pages_EnFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Posts_Ua | Posts_En | Pages_Ua | Pages_En | Folder;

export type Posts_Ua = Node & Document & {
  __typename?: 'Posts_ua';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  draft?: Maybe<Scalars['Boolean']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Posts_UaFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  draft?: InputMaybe<BooleanFilter>;
  description?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Posts_UaConnectionEdges = {
  __typename?: 'Posts_uaConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Posts_Ua>;
};

export type Posts_UaConnection = Connection & {
  __typename?: 'Posts_uaConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Posts_UaConnectionEdges>>>;
};

export type Posts_En = Node & Document & {
  __typename?: 'Posts_en';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  draft?: Maybe<Scalars['Boolean']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Posts_EnFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  draft?: InputMaybe<BooleanFilter>;
  description?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Posts_EnConnectionEdges = {
  __typename?: 'Posts_enConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Posts_En>;
};

export type Posts_EnConnection = Connection & {
  __typename?: 'Posts_enConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Posts_EnConnectionEdges>>>;
};

export type Pages_Ua = Node & Document & {
  __typename?: 'Pages_ua';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Pages_UaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Pages_UaConnectionEdges = {
  __typename?: 'Pages_uaConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages_Ua>;
};

export type Pages_UaConnection = Connection & {
  __typename?: 'Pages_uaConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Pages_UaConnectionEdges>>>;
};

export type Pages_En = Node & Document & {
  __typename?: 'Pages_en';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Pages_EnFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Pages_EnConnectionEdges = {
  __typename?: 'Pages_enConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages_En>;
};

export type Pages_EnConnection = Connection & {
  __typename?: 'Pages_enConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Pages_EnConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePosts_ua: Posts_Ua;
  createPosts_ua: Posts_Ua;
  updatePosts_en: Posts_En;
  createPosts_en: Posts_En;
  updatePages_ua: Pages_Ua;
  createPages_ua: Pages_Ua;
  updatePages_en: Pages_En;
  createPages_en: Pages_En;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePosts_UaArgs = {
  relativePath: Scalars['String']['input'];
  params: Posts_UaMutation;
};


export type MutationCreatePosts_UaArgs = {
  relativePath: Scalars['String']['input'];
  params: Posts_UaMutation;
};


export type MutationUpdatePosts_EnArgs = {
  relativePath: Scalars['String']['input'];
  params: Posts_EnMutation;
};


export type MutationCreatePosts_EnArgs = {
  relativePath: Scalars['String']['input'];
  params: Posts_EnMutation;
};


export type MutationUpdatePages_UaArgs = {
  relativePath: Scalars['String']['input'];
  params: Pages_UaMutation;
};


export type MutationCreatePages_UaArgs = {
  relativePath: Scalars['String']['input'];
  params: Pages_UaMutation;
};


export type MutationUpdatePages_EnArgs = {
  relativePath: Scalars['String']['input'];
  params: Pages_EnMutation;
};


export type MutationCreatePages_EnArgs = {
  relativePath: Scalars['String']['input'];
  params: Pages_EnMutation;
};

export type DocumentUpdateMutation = {
  posts_ua?: InputMaybe<Posts_UaMutation>;
  posts_en?: InputMaybe<Posts_EnMutation>;
  pages_ua?: InputMaybe<Pages_UaMutation>;
  pages_en?: InputMaybe<Pages_EnMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  posts_ua?: InputMaybe<Posts_UaMutation>;
  posts_en?: InputMaybe<Posts_EnMutation>;
  pages_ua?: InputMaybe<Pages_UaMutation>;
  pages_en?: InputMaybe<Pages_EnMutation>;
};

export type Posts_UaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Posts_EnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Pages_UaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Pages_EnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Posts_UaPartsFragment = { __typename: 'Posts_ua', title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null };

export type Posts_EnPartsFragment = { __typename: 'Posts_en', title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null };

export type Pages_UaPartsFragment = { __typename: 'Pages_ua', title: string, description?: string | null, body?: any | null };

export type Pages_EnPartsFragment = { __typename: 'Pages_en', title: string, description?: string | null, body?: any | null };

export type Posts_UaQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Posts_UaQuery = { __typename?: 'Query', posts_ua: { __typename: 'Posts_ua', id: string, title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Posts_UaConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Posts_UaFilter>;
}>;


export type Posts_UaConnectionQuery = { __typename?: 'Query', posts_uaConnection: { __typename?: 'Posts_uaConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Posts_uaConnectionEdges', cursor: string, node?: { __typename: 'Posts_ua', id: string, title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Posts_EnQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Posts_EnQuery = { __typename?: 'Query', posts_en: { __typename: 'Posts_en', id: string, title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Posts_EnConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Posts_EnFilter>;
}>;


export type Posts_EnConnectionQuery = { __typename?: 'Query', posts_enConnection: { __typename?: 'Posts_enConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Posts_enConnectionEdges', cursor: string, node?: { __typename: 'Posts_en', id: string, title: string, date: string, draft?: boolean | null, description?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Pages_UaQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Pages_UaQuery = { __typename?: 'Query', pages_ua: { __typename: 'Pages_ua', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Pages_UaConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Pages_UaFilter>;
}>;


export type Pages_UaConnectionQuery = { __typename?: 'Query', pages_uaConnection: { __typename?: 'Pages_uaConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Pages_uaConnectionEdges', cursor: string, node?: { __typename: 'Pages_ua', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Pages_EnQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Pages_EnQuery = { __typename?: 'Query', pages_en: { __typename: 'Pages_en', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Pages_EnConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Pages_EnFilter>;
}>;


export type Pages_EnConnectionQuery = { __typename?: 'Query', pages_enConnection: { __typename?: 'Pages_enConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Pages_enConnectionEdges', cursor: string, node?: { __typename: 'Pages_en', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const Posts_UaPartsFragmentDoc = gql`
    fragment Posts_uaParts on Posts_ua {
  __typename
  title
  date
  draft
  description
  tags
  body
}
    `;
export const Posts_EnPartsFragmentDoc = gql`
    fragment Posts_enParts on Posts_en {
  __typename
  title
  date
  draft
  description
  tags
  body
}
    `;
export const Pages_UaPartsFragmentDoc = gql`
    fragment Pages_uaParts on Pages_ua {
  __typename
  title
  description
  body
}
    `;
export const Pages_EnPartsFragmentDoc = gql`
    fragment Pages_enParts on Pages_en {
  __typename
  title
  description
  body
}
    `;
export const Posts_UaDocument = gql`
    query posts_ua($relativePath: String!) {
  posts_ua(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Posts_uaParts
  }
}
    ${Posts_UaPartsFragmentDoc}`;
export const Posts_UaConnectionDocument = gql`
    query posts_uaConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Posts_uaFilter) {
  posts_uaConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Posts_uaParts
      }
    }
  }
}
    ${Posts_UaPartsFragmentDoc}`;
export const Posts_EnDocument = gql`
    query posts_en($relativePath: String!) {
  posts_en(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Posts_enParts
  }
}
    ${Posts_EnPartsFragmentDoc}`;
export const Posts_EnConnectionDocument = gql`
    query posts_enConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Posts_enFilter) {
  posts_enConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Posts_enParts
      }
    }
  }
}
    ${Posts_EnPartsFragmentDoc}`;
export const Pages_UaDocument = gql`
    query pages_ua($relativePath: String!) {
  pages_ua(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Pages_uaParts
  }
}
    ${Pages_UaPartsFragmentDoc}`;
export const Pages_UaConnectionDocument = gql`
    query pages_uaConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Pages_uaFilter) {
  pages_uaConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Pages_uaParts
      }
    }
  }
}
    ${Pages_UaPartsFragmentDoc}`;
export const Pages_EnDocument = gql`
    query pages_en($relativePath: String!) {
  pages_en(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Pages_enParts
  }
}
    ${Pages_EnPartsFragmentDoc}`;
export const Pages_EnConnectionDocument = gql`
    query pages_enConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Pages_enFilter) {
  pages_enConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Pages_enParts
      }
    }
  }
}
    ${Pages_EnPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      posts_ua(variables: Posts_UaQueryVariables, options?: C): Promise<{data: Posts_UaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_UaQueryVariables, query: string}> {
        return requester<{data: Posts_UaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_UaQueryVariables, query: string}, Posts_UaQueryVariables>(Posts_UaDocument, variables, options);
      },
    posts_uaConnection(variables?: Posts_UaConnectionQueryVariables, options?: C): Promise<{data: Posts_UaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_UaConnectionQueryVariables, query: string}> {
        return requester<{data: Posts_UaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_UaConnectionQueryVariables, query: string}, Posts_UaConnectionQueryVariables>(Posts_UaConnectionDocument, variables, options);
      },
    posts_en(variables: Posts_EnQueryVariables, options?: C): Promise<{data: Posts_EnQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_EnQueryVariables, query: string}> {
        return requester<{data: Posts_EnQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_EnQueryVariables, query: string}, Posts_EnQueryVariables>(Posts_EnDocument, variables, options);
      },
    posts_enConnection(variables?: Posts_EnConnectionQueryVariables, options?: C): Promise<{data: Posts_EnConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_EnConnectionQueryVariables, query: string}> {
        return requester<{data: Posts_EnConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Posts_EnConnectionQueryVariables, query: string}, Posts_EnConnectionQueryVariables>(Posts_EnConnectionDocument, variables, options);
      },
    pages_ua(variables: Pages_UaQueryVariables, options?: C): Promise<{data: Pages_UaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_UaQueryVariables, query: string}> {
        return requester<{data: Pages_UaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_UaQueryVariables, query: string}, Pages_UaQueryVariables>(Pages_UaDocument, variables, options);
      },
    pages_uaConnection(variables?: Pages_UaConnectionQueryVariables, options?: C): Promise<{data: Pages_UaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_UaConnectionQueryVariables, query: string}> {
        return requester<{data: Pages_UaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_UaConnectionQueryVariables, query: string}, Pages_UaConnectionQueryVariables>(Pages_UaConnectionDocument, variables, options);
      },
    pages_en(variables: Pages_EnQueryVariables, options?: C): Promise<{data: Pages_EnQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_EnQueryVariables, query: string}> {
        return requester<{data: Pages_EnQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_EnQueryVariables, query: string}, Pages_EnQueryVariables>(Pages_EnDocument, variables, options);
      },
    pages_enConnection(variables?: Pages_EnConnectionQueryVariables, options?: C): Promise<{data: Pages_EnConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_EnConnectionQueryVariables, query: string}> {
        return requester<{data: Pages_EnConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Pages_EnConnectionQueryVariables, query: string}, Pages_EnConnectionQueryVariables>(Pages_EnConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  